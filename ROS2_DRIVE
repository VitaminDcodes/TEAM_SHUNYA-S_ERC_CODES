#include <Arduino.h>
#include <micro_ros_platformio.h>
#include <rcl/rcl.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <std_msgs/msg/int16.h>

// ROS2 Declaration
rcl_node_t node;
rcl_allocator_t allocator;
rclc_support_t support;
rclc_executor_t executor;

rcl_subscription_t subscriber1; // /rover/choice
std_msgs__msg__Int16 msg_1;

rcl_subscription_t subscriber2; // /rover/pwm
std_msgs__msg__Int16 msg_2;

// Motor Driver Pins
#define dir_fl 26   // Front Left
#define pwm_fl 27
#define dir_fr 19   // Front Right
#define pwm_fr 18
#define dir_bl 25   // Back Left
#define pwm_bl 33
#define dir_br 32   // Back Right
#define pwm_br 4

// Global control variables
int input_pwm = 0;
int choice = 0;
int choice_1 = 0;

// Motor class
class motor {
  private:
    int dir_pin;
    int pwm_pin;
  public:
    motor(int pin1, int pin2);
    void clockwise();
    void anticlockwise();
    void pwm(int input_pwm);
};

motor::motor(int pin1, int pin2) {
    dir_pin = pin1;
    pwm_pin = pin2;
    pinMode(dir_pin, OUTPUT);
    pinMode(pwm_pin, OUTPUT);
}

void motor::clockwise() {
    digitalWrite(dir_pin, LOW);  // Verified experimentally
}

void motor::anticlockwise() {
    digitalWrite(dir_pin, HIGH);
}

void motor::pwm(int input_pwm) {
    analogWrite(pwm_pin, input_pwm);
}

// Instantiate motors
motor motorFL(dir_fl, pwm_fl);
motor motorFR(dir_fr, pwm_fr);
motor motorBR(dir_br, pwm_br);
motor motorBL(dir_bl, pwm_bl);

// Movement functions
void forward() {
    Serial.println("[CMD] FORWARD");
    motorFR.clockwise(); motorBR.clockwise();
    motorFL.anticlockwise(); motorBL.anticlockwise();
}

void backward() {
    Serial.println("[CMD] BACKWARD");
    motorFR.anticlockwise(); motorBR.anticlockwise();
    motorFL.clockwise(); motorBL.clockwise();
}

void spotleft() {
    Serial.println("[CMD] SPOT LEFT");
    motorFR.clockwise(); motorBR.clockwise();
    motorFL.clockwise(); motorBL.clockwise();
}

void spotright() {
    Serial.println("[CMD] SPOT RIGHT");
    motorFR.anticlockwise(); motorBR.anticlockwise();
    motorFL.anticlockwise(); motorBL.anticlockwise();
}

// ROS2 Callback: Choice
void choiceCallback(const void *msg_1) {
    const std_msgs__msg__Int16 *msg1 = (const std_msgs__msg__Int16*)msg_1;
    choice = msg1->data;
    Serial.print("[ROS2] Choice received: ");
    Serial.println(choice);

    switch (choice) {
        case 1: forward(); break;
        case 2: backward(); break;
        case 3: spotleft(); break;
        case 4: spotright(); break;
        case 0:
            Serial.println("[CMD] STOP");
            input_pwm = 0;
            break;
    }

    // Apply PWM
    motorFR.pwm(input_pwm);
    motorBR.pwm(input_pwm);
    motorFL.pwm(input_pwm);
    motorBL.pwm(input_pwm);
}

// ROS2 Callback: PWM
void pwmCallback(const void *msg_2) {
    const std_msgs__msg__Int16 *msg2 = (const std_msgs__msg__Int16*)msg_2;
    choice_1 = msg2->data;
    input_pwm = constrain(choice_1, 0, 255);

    Serial.print("[ROS2] PWM received: ");
    Serial.println(input_pwm);
}

void setup() {
    Serial.begin(115200);
    delay(2000);

    set_microros_serial_transports(Serial);
    allocator = rcl_get_default_allocator();

    rclc_support_init(&support, 0, NULL, &allocator);
    rclc_node_init_default(&node, "driver", "", &support);

    rclc_subscription_init_default(
        &subscriber1,
        &node,
        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int16),
        "/rover/choice"
    );

    rclc_subscription_init_default(
        &subscriber2,
        &node,
        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int16),
        "/rover/pwm"
    );

    rclc_executor_init(&executor, &support.context, 2, &allocator);
    rclc_executor_add_subscription(&executor, &subscriber1, &msg_1, &choiceCallback, ON_NEW_DATA);
    rclc_executor_add_subscription(&executor, &subscriber2, &msg_2, &pwmCallback, ON_NEW_DATA);

    Serial.println("[INIT] Setup complete.");
}

void loop() {
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
    vTaskDelay(pdMS_TO_TICKS(100));  // better than delay() in RTOS
}
